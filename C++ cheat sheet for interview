/******************** string, char, integer conversion ***************/
[int to string]         to_string(num);
[string to int]         stoi(s);            // i.e.  int val = stoi("1024");
[char to string]        string(1, ch); 
[charr array to string] string(charArr);

/********************** string ***************************/
In C++ string is mutable

string(char[] chArr) or string(char* chArr);  // string constructor
string(int n, char ch);                       // string constructor with n characters of ch

string str = "1234";
str[i];                                       // access i th character
str.size();  or str.length();
str.substr(start);                            // [start,  )              
str.substr(start, length);                    // [start, start + length - 1]       str doesn't change 

str.append("abc");
str.find("ab");                              // return pos where "ab" first occur in str

str.erase(2);                                // erase substring starting from 2.   [2, )    str changes !!!!!!!!!  str = "12"
str.erase(pos, length);                    // erase length characters starting from pos 
str.insert(2, "sz");                         // insert characters starting from pos 2.      str changes !!!!!!!!!

str1.compare(str2);                          //
void reverse(str.begin(), str.end());        // reverse string.       str changes!!!!!!!!!!  no return value

#include <sstream>   // similar to StringBuilder in Java
sstream ss;
ss << "year" << 2017;
ss.str();                                 // convert sstream to string

/********************** array ***************************/
int nums[10] = {0};
[array to vector]  vector<int> vec(&nums[0], &nums[10]);

/********************** vector ***************************/
#include <vector>
vector<int> v;
vector<int> v(size, 0);   // create a vector with length of size and initialize all elements to 0;

int val = v[i];           // random access
v.empty();                // return bool to indicate empty or not
v.push_back(e);           // insert element to end
v.pop_back();             // delete last element
v.clear();
v.front();                // return first element
v.erase(v.begin() + 5);   // delete 6th element;
v.insert(v.begin(), var)  // insert var in first position
v.begin();                // return iterator pointing to first element;    
v.end();                  // return iterator pointing to null behind last element;

for(vector<int>::iterator it = myvector.begin() ; it != myvector.end(); ++it)
{
    cout << *it << endl;
}

v.resize(num);            // resize the length of vector
v.resize(num, val);       // resize vector by using val to padding  (default is 0)

/********************** unordered_map, map ***************************/

/********************** stack, queue ***************************/
#include <stack>
#include <queue>

stack<int> s;
queue<int> q;
q.front();                    // access the first element in queue
q.pop();                      // no return value

/************************* swap reference / pointer ***********************/
In bfs, we use two queues in Java. Similarly, we can swap two references in C++
cur.swap(next);     // swap cur and next reference;

In cpp, the operator precedence is:  () > []  > *  >  >>  > &
        that is: Function call > Array subscripting > Dereference > Bitwise shift > Bitwise AND
        
/************************ Node ***************************/
class TreeNode{
public:
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int val){
        this->val = val;
        this->left = NULL;
        this->right = NULL;
    }
}
