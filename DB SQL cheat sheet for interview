/*
         Student Table
   id  | firstName | lastName | gender | className | grade 
   ----|-----------|----------|--------|-----------|-------
    1  |  Jason    |  Bourne  |  male  |  F0903    | 99
*/

0. create Index:
   方法1： CREATE INDEX indexName ON table_name (column_name)
   方法2： ALTER table tableName ADD INDEX indexName(columnName)
   方法3：
          CREATE TABLE mytable(  
                  ID INT NOT NULL,   
                  username VARCHAR(16) NOT NULL,  
                  INDEX [indexName] (username(length)) 
          );  

1. index on single column

ALTER TABLE Student ADD UNIQUE INDEX (firstName);

2. composite index (on multiple column: "firstName", "className")   # 多个字段按照一定顺序组织的索引, 比如所有相同firstName按照 className order

ALTER TABLE Student ADD INDEX (firstName, className);

3. composite index to speed up search:

SELECT * FROM Student WHERE firstName='Jason' ORDER BY className;



View:
1）视图它是虚拟的表，不占用存储空间，所以如果是我们在进行复杂的查询过程，不想进行表套表的话，可以在中间生成视图，然后在下一步直接引用视图
 （当然，你也可以生成中间表。但是假如你的存储空间只有10w，生成的中间表需要占用8w的存储空间，生成表后你剩下2w想干啥，此时通过生成view就可以避免了）。
  这是视图的第一个好处。

2）视图view是动态的。创建的视图来源于其他的实实在在的表，当随着时间的更新，表发生变化时，我们的视图所反应的内容其实也是变化的。
   而我们所生成的中间表固定了就是固定了，不会随着基表的变化而改变。因此，如果我们做任务所需要的表格是不断更新的，此时我们在中间创建视图是正确的选择，因为视图可以做到与时俱进。
